{"version":3,"sources":["assets/italic.svg","assets/bold.svg","global-styles.js","lib/colors.js","ui/templates/Main/Main.js","ui/templates/PageContainer/PageContainer.js","ui/templates/FieldWrapper/FieldWrapper.js","ui/molecules/Field/Field.js","constants/colors.js","ui/molecules/ColorPicker/ColorPicker.js","ui/molecules/ColorCircle/ColorCircle.js","ui/molecules/Panel/Panel.js","ui/molecules/PanelButton/PanelButton.js","ui/molecules/Select/Select.js","ui/atoms/Tab/Tab.js","ui/atoms/Button/Button.js","features/widgets/molecules/EmailField/EmailField.js","features/widgets/organisms/Sample/Sample.js","features/widgets/organisms/BackgroundColorPicker/BackgroundColorPicker.js","ui/organisms/Tabs/Tabs.js","features/widgets/templates/TabsContainer/TabsContainer.js","constants/text.js","features/widgets/organisms/WidgetTags/WidgetTags.js","features/widgets/pages/Configuration/Configuration.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","GlobalStyle","createGlobalStyle","_templateObject","blue","gray","white","SideBar","styled","aside","Main_templateObject","Wrapper","main","_templateObject2","Main","memo","_ref","children","react_default","a","createElement","PageContainer","div","PageContainer_templateObject","FieldWrapper","section","FieldWrapper_templateObject","Label","label","Field_templateObject","Input","input","Field_templateObject2","lighten","Field","id","placeholder","value","onChange","onFocus","onBlur","htmlFor","defaultProps","COLORS","ColorPicker_templateObject","ColorPicker","selectedColor","onClick","ColorPicker_Wrapper","map","color","ColorCircle_ColorCircle","key","Circle","button","ColorCircle_templateObject","_ref2","darken","I","i","ColorCircle_templateObject2","_ref3","invert","ColorCircle","_ref4","type","Panel_templateObject","ChildWrapper","Panel_templateObject2","Panel","Panel_Wrapper","React","Children","child","PanelButton_templateObject","checked","PanelButton_templateObject2","Icon","img","_templateObject3","PanelButton","iconSrc","PanelButton_Label","PanelButton_Input","src","SelectTag","select","Select_templateObject","Select","options","option","Tab","Tab_templateObject","isActive","Button","Button_templateObject","outline","backgroundColor","concat","fontSize","_ref5","_ref6","propTypes","PropTypes","string","isRequired","bool","EmailField_templateObject","EmailField_templateObject2","mainSize","mainColor","EmailField","EmailField_Wrapper","EmailField_Input","fontStyles","css","Sample_templateObject","size","fontFamily","bold","italic","Sample_templateObject2","_ref7","_ref8","Message","span","Sample_templateObject3","Header","h2","_templateObject4","StyledButton","_templateObject5","MainWrapper","_templateObject6","Sample","_ref9","header","headerFont","headerBold","headerItalic","headerSize","headerColor","mainFont","mainBold","mainItalic","buttonFont","buttonBold","buttonItalic","buttonSize","buttonColor","Sample_Wrapper","EmailField_EmailField","BackgroundColorPicker_templateObject","BackgroundColorPicker_templateObject2","PickerWrapper","BackgroundColorPicker_templateObject3","BackgroundColorPicker","_PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","isOpen","setInputRef","node","inputRef","setPickerRef","pickerRef","handleOpenPicker","setState","handleClosePicker","event","contains","target","inherits","createClass","document","addEventListener","removeEventListener","_this$props","props","handleFieldChange","BackgroundColorPicker_Wrapper","BackgroundColorPicker_FieldWrapper","ref","Field_Field","ColorPicker_ColorPicker","PureComponent","TabList","Tabs_templateObject","TabContent","Tabs_templateObject2","Tabs","activeTab","tabs","tabIndex","findIndex","tab","toArray","TabsContainer","TabsContainer_templateObject","FONT_SIZES_LIST","FONT_FAMILIES","availableTabs","WidgetTags","handlePanelButtonClick","_useState","useState","_useState2","slicedToArray","handleTabClick","Tabs_Tabs","Panel_Panel","PanelButton_PanelButton","italicIcon","boldIcon","Configuration","config","name","objectSpread","defineProperty","handleColorClick","BackgroundColorPicker_BackgroundColorPicker","Boolean","window","location","hostname","match","ReactDOM","render","react","Configuration_Configuration","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aae272d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/italic.fa84e6f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/bold.7c5dacd2.svg\";","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n\tbody {\n\t\tfont-family: Arial, sans-serif;\n    margin: 0;\n    font-size: 16px;\n  }\n  \n  body, #root {\n    height: 100vh;\n  }\n\n  /* reset default styles */\n  input, button, select {\n    outline: none;\n    border: 0;\n  }\n`\n","export const blue = {\n  lighter: '#b29ce0',\n  light: '#9878d6',\n  medium: '#648AD1',\n}\n\nexport const gray = {\n  lighter: '#c1c3d0',\n  light: '#d1d6da',\n  medium: '#6f7e8e',\n}\n\nexport const white = {\n  medium: '#ffffff',\n}\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { blue } from '../../../lib/colors'\nimport { PageContainer } from '..'\n\nconst SideBar = styled.aside`\n  width: 216px;\n  background-color: ${blue.medium};\n`\n\nconst Wrapper = styled.main`\n  display: flex;\n  min-height: 100%;\n`\n\nexport const MainView = ({ children }) => (\n  <Wrapper>\n    <SideBar />\n    <PageContainer>{children}</PageContainer>\n  </Wrapper>\n)\n\nMainView.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport const Main = memo(MainView)\n","import styled from 'styled-components'\n\nexport const PageContainer = styled.div`\n  margin-top: 30px;\n  margin-left: 40px;\n  width: 600px;\n`\n","import styled from 'styled-components'\n\nimport { gray } from '../../../lib/colors'\n\nexport const FieldWrapper = styled.section`\n  height: 34px;\n  border-bottom: 1px solid ${gray.light};\n  margin-bottom: 20px;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\nimport { lighten } from 'polished'\n\nimport { gray } from '../../../lib/colors'\n\nconst Label = styled.label`\n  color: ${gray.medium};\n  font-size: 14px;\n  font-weight: bold;\n  margin-right: 15px;\n  cursor: pointer;\n`\n\nconst Input = styled.input`\n  color: ${gray.medium};\n  font-size: 14px;\n\n  &::placeholder {\n    color: ${lighten(0.3, gray.medium)};\n  }\n`\n\nexport const Field = ({ id, placeholder, value, label, onChange, onFocus, onBlur }) => (\n  <div>\n    <Label htmlFor={id}>{label}</Label>\n    <Input id={id} placeholder={placeholder} value={value} onChange={onChange} onFocus={onFocus} onBlur={onBlur} />\n  </div>\n)\n\nField.propTypes = {\n  id: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n}\n\nField.defaultProps = {\n  onFocus: null,\n  onBlur: null,\n}\n","export const COLORS = [\n  '#000000',\n  '#454545',\n  '#666666',\n  '#989898',\n  '#b6b6b6',\n  '#cbcbcb',\n  '#d8d8d8',\n  '#eeeef0',\n  '#f3f3f3',\n  '#ffffff',\n  '#3884ee',\n  '#2800ff',\n  '#a800ff',\n  '#ff00ff',\n  '#f00f00',\n  '#ff9300',\n  '#fcff00',\n  '#ff0000',\n]\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { gray, white } from '../../../lib/colors'\nimport { ColorCircle } from '..'\nimport { COLORS } from '../../../constants/colors'\n\nconst Wrapper = styled.div`\n  background-color: ${white.medium};\n  max-width: 308px;\n  padding: 19px;\n  border: 1px solid ${gray.light};\n  border-top: 0;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nexport const ColorPicker = ({ selectedColor, onClick }) => (\n  <Wrapper>\n    {COLORS.map(color => (\n      <ColorCircle key={color} color={color} selectedColor={selectedColor} onClick={() => onClick(color)} />\n    ))}\n  </Wrapper>\n)\n\nColorPicker.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { darken, invert } from 'polished'\n\nconst Circle = styled.button`\n  position: relative;\n  height: 32px;\n  width: 32px;\n  background-color: ${({ color }) => color};\n  border-radius: 30px;\n  border: 1px solid ${({ color }) => darken(0.1, color)}};\n  margin: 6px;\n  cursor: pointer;\n`\n\nconst I = styled.i`\n  left: 0;\n  right: 0;\n  top: 7px;\n  position: absolute;\n  margin: auto;\n  width: 5px;\n  height: 10px;\n  border: solid ${({ color }) => invert(color)};\n  border-width: 0 2px 2px 0;\n  transform: rotate(45deg);\n`\n\nexport const ColorCircle = ({ color, selectedColor, onClick }) => (\n  <Circle type=\"button\" color={color} onClick={onClick}>\n    {color === selectedColor && <I color={color} />}\n  </Circle>\n)\n\nColorCircle.propTypes = {\n  color: PropTypes.string.isRequired,\n  selectedColor: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { gray } from '../../../lib/colors'\n\nconst Wrapper = styled.div`\n  display: flex;\n`\n\nconst ChildWrapper = styled.div`\n  margin-right: 10px;\n  padding-right: 10px;\n  border-right: 1px solid ${gray.light};\n\n  &:last-child {\n    border-right: none;\n  }\n`\n\nexport const Panel = ({ children }) => (\n  <Wrapper>\n    {React.Children.map(children, child => (\n      <ChildWrapper>{child}</ChildWrapper>\n    ))}\n  </Wrapper>\n)\n\nPanel.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { lighten } from 'polished'\n\nimport { gray } from '../../../lib/colors'\n\nconst Label = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  height: 24px;\n  width: 24px;\n  cursor: pointer;\n  font-size: 22px;\n  user-select: none;\n  border-radius: 2px;\n  background-color: ${({ checked }) => checked && lighten(0.09, gray.lighter)};\n\n  &:hover {\n    background-color: ${({ checked }) => !checked && lighten(0.15, gray.lighter)};\n  }\n`\n\nconst Input = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n`\n\nconst Icon = styled.img`\n  height: 20px;\n  width: 20px;\n`\n\nexport const PanelButton = ({ id, iconSrc, checked, onChange }) => (\n  <Label htmlFor={id} checked={checked}>\n    <Input type=\"checkbox\" id={id} checked={checked} onChange={onChange} />\n    <Icon src={iconSrc} />\n  </Label>\n)\n\nPanelButton.propTypes = {\n  id: PropTypes.string.isRequired,\n  iconSrc: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n}\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { white } from '../../../lib/colors'\n\nconst SelectTag = styled.select`\n  display: flex;\n  align-items: center;\n  appearance: none;\n  background-color: ${white.medium};\n  border: 0;\n  height: 20px;\n  cursor: pointer;\n  font-weight: 14px;\n`\n\nconst SelectView = ({ id, options, onChange, value }) => (\n  <SelectTag id={id} onChange={onChange} value={value}>\n    {options.map(option => (\n      <option key={option}>{option}</option>\n    ))}\n  </SelectTag>\n)\n\nSelectView.propTypes = {\n  id: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n}\n\nexport const Select = memo(SelectView)\n","import styled from 'styled-components'\n\nimport { gray, blue, white } from '../../../lib/colors'\n\nexport const Tab = styled.button`\n  position: relative;\n  bottom: -1px;\n  border: 1px solid ${({ isActive }) => (isActive ? gray.light : 'transparent')};\n  border-bottom: 0;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: bold;\n  padding: 10px 20px;\n  color: ${({ isActive }) => (!isActive ? gray.lighter : blue.light)};\n  background-color: ${({ isActive }) => (isActive ? white.medium : 'transparent')};\n\n  &:hover {\n    color: ${({ isActive }) => (!isActive ? blue.lighter : null)};\n  }\n`\n","import styled from 'styled-components'\nimport { darken } from 'polished'\nimport PropTypes from 'prop-types'\n\nimport { white, gray } from '../../../lib/colors'\n\nexport const Button = styled.button`\n  border: ${({ outline, backgroundColor }) => outline && `1px solid ${backgroundColor}`};\n  background-color: ${({ outline, backgroundColor }) => (!outline ? backgroundColor : 'transparent')};\n  padding: 0.9em 2.8em;\n  border-radius: 5px;\n  cursor: pointer;\n  color: ${({ outline, color }) => (outline ? color : white.medium)};\n  font-size: ${({ fontSize }) => `${fontSize}px`}\n\n  &:hover {\n    background-color: ${({ outline, backgroundColor }) => (outline ? backgroundColor : darken(0.1, backgroundColor))};\n    color: ${({ outline }) => outline && white.medium};\n  }\n`\n\nButton.propTypes = {\n  backgroundColor: PropTypes.string.isRequired,\n  outline: PropTypes.bool.isRequired,\n  color: PropTypes.string.isRequired,\n  fontSize: PropTypes.string.isRequired,\n}\n\nButton.defaultProps = {\n  outline: false,\n  backgroundColor: '#648AD1',\n  color: gray.medium,\n  fontSize: '14',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { lighten } from 'polished'\n\nimport { gray } from '../../../../lib/colors'\n\nconst Wrapper = styled.div`\n  border-bottom: 2px solid ${gray.light};\n  max-width: 350px;\n  width: 100%;\n  padding: 4px 0;\n  margin-top: 40px;\n`\nconst Input = styled.input`\n  font-size: ${({ mainSize }) => `${mainSize}px`};\n  background-color: transparent;\n  width: 100%;\n  color: ${({ mainColor }) => mainColor};\n\n  &::placeholder {\n    color: ${({ mainColor }) => lighten(0.3, mainColor)};\n  }\n`\n\nexport const EmailField = ({ mainSize, mainColor }) => (\n  <Wrapper>\n    <Input placeholder=\"Введите e-mail\" mainSize={mainSize} mainColor={mainColor} />\n  </Wrapper>\n)\n\nEmailField.propTypes = {\n  mainSize: PropTypes.string.isRequired,\n  mainColor: PropTypes.string.isRequired,\n}\n","import React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport styled, { css } from 'styled-components'\n\nimport { gray } from '../../../../lib/colors'\nimport { Button } from '../../../../ui/atoms'\nimport { EmailField } from '../../molecules'\n\nconst fontStyles = css`\n  font-size: ${({ size }) => `${size}px`};\n  font-family: ${({ fontFamily }) => fontFamily}\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n  font-style: ${({ italic }) => (italic ? 'italic' : 'normal')};\n  color: ${({ color }) => color};\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  border: 1px solid ${gray.light};\n  padding-top: 100px;\n  padding-bottom: 95px;\n  color: ${({ mainColor }) => mainColor};\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  font-size: ${({ mainSize }) => `${mainSize}px`};\n`\n\nconst Message = styled.span`\n  display: block;\n  margin-top: 50px;\n`\n\nconst Header = styled.h2`\n  margin-top: 0px;\n  word-break: break-word;\n  ${fontStyles}\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: 100px;\n  ${fontStyles}\n`\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  ${fontStyles}\n`\n\nconst SampleView = ({\n  header,\n  headerFont,\n  headerBold,\n  headerItalic,\n  headerSize,\n  headerColor,\n  backgroundColor,\n  mainFont,\n  mainBold,\n  mainItalic,\n  mainSize,\n  mainColor,\n  buttonFont,\n  buttonBold,\n  buttonItalic,\n  buttonSize,\n  buttonColor,\n}) => (\n  <Wrapper backgroundColor={backgroundColor} mainSize={mainSize} mainColor={mainColor}>\n    <Header size={headerSize} bold={headerBold} italic={headerItalic} color={headerColor} fontFamily={headerFont}>\n      {header}\n    </Header>\n    <MainWrapper bold={mainBold} italic={mainItalic} fontFamily={mainFont}>\n      <EmailField mainSize={mainSize} mainColor={mainColor} />\n      <Message>Процесс займет у вас не больше 10 минут</Message>\n    </MainWrapper>\n    <StyledButton\n      type=\"button\"\n      fontSize={buttonSize}\n      bold={buttonBold}\n      italic={buttonItalic}\n      fontFamily={buttonFont}\n      color={buttonColor}\n    >\n      Далее\n    </StyledButton>\n  </Wrapper>\n)\n\nSampleView.propTypes = {\n  header: PropTypes.string.isRequired,\n  headerFont: PropTypes.string.isRequired,\n  headerBold: PropTypes.bool.isRequired,\n  headerItalic: PropTypes.bool.isRequired,\n  headerSize: PropTypes.string.isRequired,\n  headerColor: PropTypes.string.isRequired,\n  backgroundColor: PropTypes.string.isRequired,\n  mainFont: PropTypes.string.isRequired,\n  mainBold: PropTypes.bool.isRequired,\n  mainItalic: PropTypes.bool.isRequired,\n  mainSize: PropTypes.string.isRequired,\n  mainColor: PropTypes.string.isRequired,\n  buttonFont: PropTypes.string.isRequired,\n  buttonSize: PropTypes.string.isRequired,\n  buttonBold: PropTypes.bool.isRequired,\n  buttonItalic: PropTypes.bool.isRequired,\n  buttonColor: PropTypes.string.isRequired,\n}\n\nexport const Sample = memo(SampleView)\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { Field, ColorPicker } from '../../../../ui/molecules'\n\nconst Wrapper = styled.div`\n  margin-bottom: 37px;\n  position: relative;\n`\n\nconst FieldWrapper = styled.section`\n  height: 34px;\n  border-bottom: 1px solid #d1d6da;\n`\n\nconst PickerWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  position: absolute;\n  z-index: 1;\n  width: 100%;\n`\n\nexport class BackgroundColorPicker extends PureComponent {\n  state = {\n    isOpen: false,\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClosePicker)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClosePicker)\n  }\n\n  setInputRef = node => {\n    this.inputRef = node\n  }\n\n  setPickerRef = node => {\n    this.pickerRef = node\n  }\n\n  handleOpenPicker = () => {\n    this.setState({\n      isOpen: true,\n    })\n  }\n\n  handleClosePicker = event => {\n    if (\n      this.inputRef &&\n      this.pickerRef &&\n      !this.inputRef.contains(event.target) &&\n      !this.pickerRef.contains(event.target)\n    ) {\n      this.setState({\n        isOpen: false,\n      })\n    }\n  }\n\n  render() {\n    const { backgroundColor, handleFieldChange, onClick } = this.props\n    const { isOpen } = this.state\n\n    return (\n      <Wrapper>\n        <FieldWrapper>\n          <div ref={this.setInputRef}>\n            <Field\n              value={backgroundColor}\n              id=\"backgroundColor\"\n              placeholder=\"Цвет основного фона\"\n              label=\"Цвет основного фона:\"\n              onChange={handleFieldChange}\n              onFocus={this.handleOpenPicker}\n            />\n          </div>\n        </FieldWrapper>\n        <PickerWrapper>\n          {isOpen && (\n            <div ref={this.setPickerRef}>\n              <ColorPicker onClick={onClick} selectedColor={backgroundColor} />\n            </div>\n          )}\n        </PickerWrapper>\n      </Wrapper>\n    )\n  }\n}\n\nBackgroundColorPicker.propTypes = {\n  backgroundColor: PropTypes.string.isRequired,\n  handleFieldChange: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { Tab } from '../../atoms'\nimport { gray } from '../../../lib/colors'\n\nconst TabList = styled.div`\n  display: flex;\n`\n\nexport const TabContent = styled.div`\n  border: 1px solid ${gray.light};\n  padding: 15px 20px;\n`\n\nexport const Tabs = ({ activeTab, tabs, onClick, children }) => {\n  const tabIndex = tabs.findIndex(tab => tab.key === activeTab)\n\n  return (\n    <div>\n      <TabList>\n        {tabs.map(({ key, value }) => (\n          <Tab type=\"button\" key={key} isActive={activeTab === key} onClick={event => onClick(key)}>\n            {value}\n          </Tab>\n        ))}\n      </TabList>\n      <TabContent>{React.Children.toArray(children)[tabIndex]}</TabContent>\n    </div>\n  )\n}\n\nTabs.propTypes = {\n  activeTab: PropTypes.string.isRequired,\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string,\n      value: PropTypes.string,\n    }),\n  ).isRequired,\n  onClick: PropTypes.func.isRequired,\n  children: PropTypes.arrayOf(PropTypes.node).isRequired,\n}\n","import styled from 'styled-components'\n\nexport const TabsContainer = styled.div`\n  margin-bottom: 24px;\n`\n","export const FONT_SIZES_LIST = ['8', '9', '10', '11', '12', '14', '18', '24', '30', '36', '48', '60', '72']\nexport const FONT_FAMILIES = ['Arial', 'Times New Roman']\n","import React, { useState, memo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Panel, PanelButton, Select } from '../../../../ui/molecules'\nimport { Tabs } from '../../../../ui/organisms'\nimport { TabsContainer } from '../../templates'\nimport italicIcon from '../../../../assets/italic.svg'\nimport boldIcon from '../../../../assets/bold.svg'\nimport { FONT_SIZES_LIST, FONT_FAMILIES } from '../../../../constants/text'\n\nconst availableTabs = [\n  { key: 'title', value: 'Заголовок' },\n  { key: 'mainText', value: 'Основной текст' },\n  { key: 'button', value: 'Кнопка' },\n]\n\nexport const WidgetTagsView = ({\n  headerItalic,\n  handlePanelButtonClick,\n  headerBold,\n  handleFieldChange,\n  headerSize,\n  headerFont,\n  mainItalic,\n  mainBold,\n  mainSize,\n  mainFont,\n  buttonItalic,\n  buttonBold,\n  buttonSize,\n  buttonFont,\n}) => {\n  const [activeTab, handleTabClick] = useState(availableTabs[0].key)\n\n  return (\n    <TabsContainer>\n      <Tabs tabs={availableTabs} activeTab={activeTab} onClick={tab => handleTabClick(tab)}>\n        <Panel>\n          <PanelButton\n            id=\"headerItalic\"\n            iconSrc={italicIcon}\n            checked={headerItalic}\n            onChange={handlePanelButtonClick}\n          />\n          <PanelButton id=\"headerBold\" iconSrc={boldIcon} checked={headerBold} onChange={handlePanelButtonClick} />\n          <Select id=\"headerSize\" options={FONT_SIZES_LIST} onChange={handleFieldChange} value={headerSize} />\n          <Select id=\"headerFont\" options={FONT_FAMILIES} onChange={handleFieldChange} value={headerFont} />\n        </Panel>\n        <Panel>\n          <PanelButton id=\"mainItalic\" iconSrc={italicIcon} checked={mainItalic} onChange={handlePanelButtonClick} />\n          <PanelButton id=\"mainBold\" iconSrc={boldIcon} checked={mainBold} onChange={handlePanelButtonClick} />\n          <Select id=\"mainSize\" options={FONT_SIZES_LIST} onChange={handleFieldChange} value={mainSize} />\n          <Select id=\"mainFont\" options={FONT_FAMILIES} onChange={handleFieldChange} value={mainFont} />\n        </Panel>\n        <Panel>\n          <PanelButton\n            id=\"buttonItalic\"\n            iconSrc={italicIcon}\n            checked={buttonItalic}\n            onChange={handlePanelButtonClick}\n          />\n          <PanelButton id=\"buttonBold\" iconSrc={boldIcon} checked={buttonBold} onChange={handlePanelButtonClick} />\n          <Select id=\"buttonSize\" options={FONT_SIZES_LIST} onChange={handleFieldChange} value={buttonSize} />\n          <Select id=\"buttonFont\" options={FONT_FAMILIES} onChange={handleFieldChange} value={buttonFont} />\n        </Panel>\n      </Tabs>\n    </TabsContainer>\n  )\n}\n\nWidgetTagsView.propTypes = {\n  handlePanelButtonClick: PropTypes.func.isRequired,\n  handleFieldChange: PropTypes.func.isRequired,\n  headerFont: PropTypes.string.isRequired,\n  headerBold: PropTypes.bool.isRequired,\n  headerItalic: PropTypes.bool.isRequired,\n  headerSize: PropTypes.string.isRequired,\n  mainFont: PropTypes.string.isRequired,\n  mainBold: PropTypes.bool.isRequired,\n  mainItalic: PropTypes.bool.isRequired,\n  mainSize: PropTypes.string.isRequired,\n  buttonFont: PropTypes.string.isRequired,\n  buttonSize: PropTypes.string.isRequired,\n  buttonBold: PropTypes.bool.isRequired,\n  buttonItalic: PropTypes.bool.isRequired,\n}\n\nexport const WidgetTags = memo(WidgetTagsView)\n","import React, { PureComponent } from 'react'\n\nimport { Field } from '../../../../ui/molecules'\nimport { FieldWrapper } from '../../../../ui/templates'\nimport { Sample, BackgroundColorPicker, WidgetTags } from '../../organisms'\nimport { FONT_SIZES_LIST, FONT_FAMILIES } from '../../../../constants/text'\n\nexport class Configuration extends PureComponent {\n  state = {\n    config: {\n      name: '',\n      header: 'Стать клиентом',\n      headerSize: FONT_SIZES_LIST[8],\n      headerColor: '#6f7e8e',\n      headerBold: false,\n      headerItalic: false,\n      headerFont: FONT_FAMILIES[0],\n      backgroundColor: '#fdfdfd',\n      mainFont: FONT_FAMILIES[0],\n      mainBold: false,\n      mainItalic: false,\n      mainSize: FONT_SIZES_LIST[5],\n      mainColor: '#6f7e8e',\n      buttonFont: FONT_FAMILIES[0],\n      buttonBold: false,\n      buttonItalic: false,\n      buttonSize: '14',\n      buttonColor: '#fff',\n    },\n  }\n\n  handleFieldChange = ({ target }) => {\n    const { id, value } = target\n\n    this.setState(({ config }) => ({\n      config: {\n        ...config,\n        [id]: value,\n      },\n    }))\n  }\n\n  handlePanelButtonClick = ({ target }) => {\n    const { id, checked } = target\n\n    this.setState(({ config }) => ({\n      config: {\n        ...config,\n        [id]: checked,\n      },\n    }))\n  }\n\n  handleColorClick = color => {\n    this.setState(({ config }) => ({\n      config: {\n        ...config,\n        backgroundColor: color,\n      },\n    }))\n  }\n\n  render() {\n    const { config } = this.state\n    const {\n      header,\n      headerSize,\n      headerColor,\n      headerFont,\n      headerBold,\n      headerItalic,\n      name,\n      backgroundColor,\n      mainItalic,\n      mainFont,\n      mainBold,\n      mainSize,\n      mainColor,\n      buttonFont,\n      buttonBold,\n      buttonItalic,\n      buttonSize,\n      buttonColor,\n    } = config\n\n    return (\n      <form>\n        <FieldWrapper>\n          <Field\n            value={name}\n            id=\"name\"\n            placeholder=\"Введите название\"\n            label=\"Название виджета:\"\n            onChange={this.handleFieldChange}\n          />\n        </FieldWrapper>\n        <FieldWrapper>\n          <Field\n            value={header}\n            id=\"header\"\n            placeholder=\"Введите заголовок\"\n            label=\"Текст заголовка виджета:\"\n            onChange={this.handleFieldChange}\n          />\n        </FieldWrapper>\n        <WidgetTags\n          headerItalic={headerItalic}\n          handlePanelButtonClick={this.handlePanelButtonClick}\n          headerBold={headerBold}\n          handleFieldChange={this.handleFieldChange}\n          headerSize={headerSize}\n          headerFont={headerFont}\n          mainItalic={mainItalic}\n          mainBold={mainBold}\n          mainSize={mainSize}\n          mainFont={mainFont}\n          buttonItalic={buttonItalic}\n          buttonBold={buttonBold}\n          buttonSize={buttonSize}\n          buttonFont={buttonFont}\n        />\n        <BackgroundColorPicker\n          backgroundColor={backgroundColor}\n          handleFieldChange={this.handleFieldChange}\n          onClick={this.handleColorClick}\n        />\n        <Sample\n          header={header}\n          headerFont={headerFont}\n          headerSize={headerSize}\n          headerBold={headerBold}\n          headerItalic={headerItalic}\n          headerColor={headerColor}\n          backgroundColor={backgroundColor}\n          mainFont={mainFont}\n          mainBold={mainBold}\n          mainItalic={mainItalic}\n          mainSize={mainSize}\n          mainColor={mainColor}\n          buttonFont={buttonFont}\n          buttonBold={buttonBold}\n          buttonItalic={buttonItalic}\n          buttonSize={buttonSize}\n          buttonColor={buttonColor}\n        />\n      </form>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { Fragment } from 'react'\n\nimport { GlobalStyle } from './global-styles'\nimport { Main } from './ui/templates'\nimport { Configuration } from './features/widgets'\n\nexport const App = () => {\n  return (\n    <Fragment>\n      <Main>\n        <Configuration />\n      </Main>\n      <GlobalStyle />\n    </Fragment>\n  )\n}\n"],"sourceRoot":""}